// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(nostrFFI)
import nostrFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_nostr_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_nostr_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol AccountMetadataProtocol {
    func `name`(`name`: String)   -> AccountMetadata
    func `displayName`(`displayName`: String)   -> AccountMetadata
    func `about`(`about`: String)   -> AccountMetadata
    func `picture`(`picture`: String)  throws -> AccountMetadata
    func `nip05`(`nip05`: String)   -> AccountMetadata
    
}

public class AccountMetadata: AccountMetadataProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_accountmetadata_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_accountmetadata(pointer, $0) }
    }

    

    
    

    public func `name`(`name`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_accountmetadata_name(self.pointer, 
        FfiConverterString.lower(`name`),$0
    )
}
        )
    }

    public func `displayName`(`displayName`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_accountmetadata_display_name(self.pointer, 
        FfiConverterString.lower(`displayName`),$0
    )
}
        )
    }

    public func `about`(`about`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_accountmetadata_about(self.pointer, 
        FfiConverterString.lower(`about`),$0
    )
}
        )
    }

    public func `picture`(`picture`: String) throws -> AccountMetadata {
        return try  FfiConverterTypeAccountMetadata.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_accountmetadata_picture(self.pointer, 
        FfiConverterString.lower(`picture`),$0
    )
}
        )
    }

    public func `nip05`(`nip05`: String)  -> AccountMetadata {
        return try!  FfiConverterTypeAccountMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_accountmetadata_nip05(self.pointer, 
        FfiConverterString.lower(`nip05`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeAccountMetadata: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AccountMetadata

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountMetadata {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AccountMetadata, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountMetadata {
        return AccountMetadata(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AccountMetadata) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeAccountMetadata_lift(_ pointer: UnsafeMutableRawPointer) throws -> AccountMetadata {
    return try FfiConverterTypeAccountMetadata.lift(pointer)
}

public func FfiConverterTypeAccountMetadata_lower(_ value: AccountMetadata) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAccountMetadata.lower(value)
}


public protocol ContactProtocol {
    func `alias`()   -> String?
    func `publicKey`()   -> PublicKey
    func `relayUrl`()   -> String?
    
}

public class Contact: ContactProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`pk`: PublicKey, `relayUrl`: String? = nil, `alias`: String? = nil)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_contact_new(
        FfiConverterTypePublicKey.lower(`pk`),
        FfiConverterOptionString.lower(`relayUrl`),
        FfiConverterOptionString.lower(`alias`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_contact(pointer, $0) }
    }

    

    
    

    public func `alias`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_contact_alias(self.pointer, $0
    )
}
        )
    }

    public func `publicKey`()  -> PublicKey {
        return try!  FfiConverterTypePublicKey.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_contact_public_key(self.pointer, $0
    )
}
        )
    }

    public func `relayUrl`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_contact_relay_url(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeContact: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Contact

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Contact {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Contact, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Contact {
        return Contact(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Contact) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeContact_lift(_ pointer: UnsafeMutableRawPointer) throws -> Contact {
    return try FfiConverterTypeContact.lift(pointer)
}

public func FfiConverterTypeContact_lower(_ value: Contact) -> UnsafeMutableRawPointer {
    return FfiConverterTypeContact.lower(value)
}


public protocol EventProtocol {
    func `id`()   -> EventId
    func `pubkey`()   -> PublicKey
    func `createdAt`()   -> Timestamp
    func `kind`()   -> UInt64
    func `content`()   -> String
    func `signature`()   -> String
    func `verify`()   -> Bool
    func `asJson`()   -> String
    
}

public class Event: EventProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_event(pointer, $0) }
    }

    

    public static func `fromJson`(`json`: String) throws -> Event {
        return Event(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_event_from_json(
        FfiConverterString.lower(`json`),$0)
})
    }

    

    
    

    public func `id`()  -> EventId {
        return try!  FfiConverterTypeEventId.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_id(self.pointer, $0
    )
}
        )
    }

    public func `pubkey`()  -> PublicKey {
        return try!  FfiConverterTypePublicKey.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_pubkey(self.pointer, $0
    )
}
        )
    }

    public func `createdAt`()  -> Timestamp {
        return try!  FfiConverterTypeTimestamp.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_created_at(self.pointer, $0
    )
}
        )
    }

    public func `kind`()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_kind(self.pointer, $0
    )
}
        )
    }

    public func `content`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_content(self.pointer, $0
    )
}
        )
    }

    public func `signature`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_signature(self.pointer, $0
    )
}
        )
    }

    public func `verify`()  -> Bool {
        return try!  FfiConverterBool.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_verify(self.pointer, $0
    )
}
        )
    }

    public func `asJson`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_event_as_json(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Event

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Event {
        return Event(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Event) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> Event {
    return try FfiConverterTypeEvent.lift(pointer)
}

public func FfiConverterTypeEvent_lower(_ value: Event) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEvent.lower(value)
}


public protocol EventBuilderProtocol {
    func `toEvent`(`keys`: Keys)  throws -> Event
    func `toPowEvent`(`keys`: Keys, `difficulty`: UInt8)  throws -> Event
    func `toUnsignedEvent`(`publicKey`: PublicKey)   -> UnsignedEvent
    func `toUnsignedPowEvent`(`publicKey`: PublicKey, `difficulty`: UInt8)   -> UnsignedEvent
    
}

public class EventBuilder: EventBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`kind`: UInt64, `content`: String, `tags`: [[String]]) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_new(
        FfiConverterUInt64.lower(`kind`),
        FfiConverterString.lower(`content`),
        FfiConverterSequenceSequenceString.lower(`tags`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_eventbuilder(pointer, $0) }
    }

    

    public static func `setMetadata`(`metadata`: AccountMetadata)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_set_metadata(
        FfiConverterTypeAccountMetadata.lower(`metadata`),$0)
})
    }

    

    public static func `addRecommendedRelay`(`url`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_add_recommended_relay(
        FfiConverterString.lower(`url`),$0)
})
    }

    

    public static func `newTextNote`(`content`: String, `tags`: [[String]]) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_new_text_note(
        FfiConverterString.lower(`content`),
        FfiConverterSequenceSequenceString.lower(`tags`),$0)
})
    }

    

    public static func `longFormTextNote`(`content`: String, `tags`: [[String]]) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_long_form_text_note(
        FfiConverterString.lower(`content`),
        FfiConverterSequenceSequenceString.lower(`tags`),$0)
})
    }

    

    public static func `repost`(`eventId`: EventId, `publicKey`: PublicKey)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_repost(
        FfiConverterTypeEventId.lower(`eventId`),
        FfiConverterTypePublicKey.lower(`publicKey`),$0)
})
    }

    

    public static func `setContactList`(`list`: [Contact])  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_set_contact_list(
        FfiConverterSequenceTypeContact.lower(`list`),$0)
})
    }

    

    public static func `newEncryptedDirectMsg`(`senderKeys`: Keys, `receiverPubkey`: PublicKey, `content`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_new_encrypted_direct_msg(
        FfiConverterTypeKeys.lower(`senderKeys`),
        FfiConverterTypePublicKey.lower(`receiverPubkey`),
        FfiConverterString.lower(`content`),$0)
})
    }

    

    public static func `delete`(`ids`: [EventId], `reason`: String? = nil)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_delete(
        FfiConverterSequenceTypeEventId.lower(`ids`),
        FfiConverterOptionString.lower(`reason`),$0)
})
    }

    

    public static func `newReaction`(`eventId`: EventId, `publicKey`: PublicKey, `content`: String)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_new_reaction(
        FfiConverterTypeEventId.lower(`eventId`),
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterString.lower(`content`),$0)
})
    }

    

    public static func `newChannel`(`metadata`: AccountMetadata)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_new_channel(
        FfiConverterTypeAccountMetadata.lower(`metadata`),$0)
})
    }

    

    public static func `setChannelMetadata`(`channelId`: String, `relayUrl`: String?, `metadata`: AccountMetadata) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_set_channel_metadata(
        FfiConverterString.lower(`channelId`),
        FfiConverterOptionString.lower(`relayUrl`),
        FfiConverterTypeAccountMetadata.lower(`metadata`),$0)
})
    }

    

    public static func `newChannelMsg`(`channelId`: String, `relayUrl`: String, `content`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_new_channel_msg(
        FfiConverterString.lower(`channelId`),
        FfiConverterString.lower(`relayUrl`),
        FfiConverterString.lower(`content`),$0)
})
    }

    

    public static func `hideChannelMsg`(`messageId`: EventId, `reason`: String?)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_hide_channel_msg(
        FfiConverterTypeEventId.lower(`messageId`),
        FfiConverterOptionString.lower(`reason`),$0)
})
    }

    

    public static func `muteChannelUser`(`publicKey`: PublicKey, `reason`: String?)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_mute_channel_user(
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterOptionString.lower(`reason`),$0)
})
    }

    

    public static func `auth`(`challenge`: String, `relayUrl`: String) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventbuilder_auth(
        FfiConverterString.lower(`challenge`),
        FfiConverterString.lower(`relayUrl`),$0)
})
    }

    

    public static func `fileMetadata`(`description`: String, `metadata`: FileMetadata)  -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_eventbuilder_file_metadata(
        FfiConverterString.lower(`description`),
        FfiConverterTypeFileMetadata.lower(`metadata`),$0)
})
    }

    

    
    

    public func `toEvent`(`keys`: Keys) throws -> Event {
        return try  FfiConverterTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_eventbuilder_to_event(self.pointer, 
        FfiConverterTypeKeys.lower(`keys`),$0
    )
}
        )
    }

    public func `toPowEvent`(`keys`: Keys, `difficulty`: UInt8) throws -> Event {
        return try  FfiConverterTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_eventbuilder_to_pow_event(self.pointer, 
        FfiConverterTypeKeys.lower(`keys`),
        FfiConverterUInt8.lower(`difficulty`),$0
    )
}
        )
    }

    public func `toUnsignedEvent`(`publicKey`: PublicKey)  -> UnsignedEvent {
        return try!  FfiConverterTypeUnsignedEvent.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_eventbuilder_to_unsigned_event(self.pointer, 
        FfiConverterTypePublicKey.lower(`publicKey`),$0
    )
}
        )
    }

    public func `toUnsignedPowEvent`(`publicKey`: PublicKey, `difficulty`: UInt8)  -> UnsignedEvent {
        return try!  FfiConverterTypeUnsignedEvent.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_eventbuilder_to_unsigned_pow_event(self.pointer, 
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterUInt8.lower(`difficulty`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeEventBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EventBuilder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EventBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EventBuilder {
        return EventBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EventBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeEventBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> EventBuilder {
    return try FfiConverterTypeEventBuilder.lift(pointer)
}

public func FfiConverterTypeEventBuilder_lower(_ value: EventBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEventBuilder.lower(value)
}


public protocol EventIdProtocol {
    func `asBytes`()   -> [UInt8]
    func `toHex`()   -> String
    func `toBech32`()  throws -> String
    func `toNostrUri`()  throws -> String
    
}

public class EventId: EventIdProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`pubkey`: PublicKey, `createdAt`: Timestamp, `kind`: UInt64, `tags`: [[String]], `content`: String) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventid_new(
        FfiConverterTypePublicKey.lower(`pubkey`),
        FfiConverterTypeTimestamp.lower(`createdAt`),
        FfiConverterUInt64.lower(`kind`),
        FfiConverterSequenceSequenceString.lower(`tags`),
        FfiConverterString.lower(`content`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_eventid(pointer, $0) }
    }

    

    public static func `fromSlice`(`bytes`: [UInt8]) throws -> EventId {
        return EventId(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventid_from_slice(
        FfiConverterSequenceUInt8.lower(`bytes`),$0)
})
    }

    

    public static func `fromHex`(`hex`: String) throws -> EventId {
        return EventId(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventid_from_hex(
        FfiConverterString.lower(`hex`),$0)
})
    }

    

    public static func `fromBech32`(`id`: String) throws -> EventId {
        return EventId(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventid_from_bech32(
        FfiConverterString.lower(`id`),$0)
})
    }

    

    public static func `fromNostrUri`(`uri`: String) throws -> EventId {
        return EventId(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_eventid_from_nostr_uri(
        FfiConverterString.lower(`uri`),$0)
})
    }

    

    
    

    public func `asBytes`()  -> [UInt8] {
        return try!  FfiConverterSequenceUInt8.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_eventid_as_bytes(self.pointer, $0
    )
}
        )
    }

    public func `toHex`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_eventid_to_hex(self.pointer, $0
    )
}
        )
    }

    public func `toBech32`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_eventid_to_bech32(self.pointer, $0
    )
}
        )
    }

    public func `toNostrUri`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_eventid_to_nostr_uri(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeEventId: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EventId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventId {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EventId, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EventId {
        return EventId(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EventId) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeEventId_lift(_ pointer: UnsafeMutableRawPointer) throws -> EventId {
    return try FfiConverterTypeEventId.lift(pointer)
}

public func FfiConverterTypeEventId_lower(_ value: EventId) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEventId.lower(value)
}


public protocol FileMetadataProtocol {
    func `aes256Gcm`(`key`: String, `iv`: String)   -> FileMetadata
    func `size`(`size`: UInt64)   -> FileMetadata
    func `dimensions`(`dim`: ImageDimensions)   -> FileMetadata
    func `magnet`(`magnet`: String)   -> FileMetadata
    func `blurhash`(`blurhash`: String)   -> FileMetadata
    
}

public class FileMetadata: FileMetadataProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`url`: String, `mimeType`: String, `hash`: String) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_filemetadata_new(
        FfiConverterString.lower(`url`),
        FfiConverterString.lower(`mimeType`),
        FfiConverterString.lower(`hash`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_filemetadata(pointer, $0) }
    }

    

    
    

    public func `aes256Gcm`(`key`: String, `iv`: String)  -> FileMetadata {
        return try!  FfiConverterTypeFileMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filemetadata_aes_256_gcm(self.pointer, 
        FfiConverterString.lower(`key`),
        FfiConverterString.lower(`iv`),$0
    )
}
        )
    }

    public func `size`(`size`: UInt64)  -> FileMetadata {
        return try!  FfiConverterTypeFileMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filemetadata_size(self.pointer, 
        FfiConverterUInt64.lower(`size`),$0
    )
}
        )
    }

    public func `dimensions`(`dim`: ImageDimensions)  -> FileMetadata {
        return try!  FfiConverterTypeFileMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filemetadata_dimensions(self.pointer, 
        FfiConverterTypeImageDimensions.lower(`dim`),$0
    )
}
        )
    }

    public func `magnet`(`magnet`: String)  -> FileMetadata {
        return try!  FfiConverterTypeFileMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filemetadata_magnet(self.pointer, 
        FfiConverterString.lower(`magnet`),$0
    )
}
        )
    }

    public func `blurhash`(`blurhash`: String)  -> FileMetadata {
        return try!  FfiConverterTypeFileMetadata.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filemetadata_blurhash(self.pointer, 
        FfiConverterString.lower(`blurhash`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeFileMetadata: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FileMetadata

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileMetadata {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FileMetadata, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FileMetadata {
        return FileMetadata(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FileMetadata) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeFileMetadata_lift(_ pointer: UnsafeMutableRawPointer) throws -> FileMetadata {
    return try FfiConverterTypeFileMetadata.lift(pointer)
}

public func FfiConverterTypeFileMetadata_lower(_ value: FileMetadata) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFileMetadata.lower(value)
}


public protocol FilterProtocol {
    func `id`(`id`: String)   -> Filter
    func `ids`(`ids`: [String])   -> Filter
    func `kind`(`kind`: UInt64)   -> Filter
    func `event`(`eventId`: EventId)   -> Filter
    func `events`(`ids`: [EventId])   -> Filter
    func `pubkey`(`pubkey`: PublicKey)   -> Filter
    func `pubkeys`(`pubkeys`: [PublicKey])   -> Filter
    func `since`(`timestamp`: Timestamp)   -> Filter
    func `until`(`timestamp`: Timestamp)   -> Filter
    func `authors`(`authors`: [String])   -> Filter
    
}

public class Filter: FilterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_filter_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_filter(pointer, $0) }
    }

    

    
    

    public func `id`(`id`: String)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_id(self.pointer, 
        FfiConverterString.lower(`id`),$0
    )
}
        )
    }

    public func `ids`(`ids`: [String])  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_ids(self.pointer, 
        FfiConverterSequenceString.lower(`ids`),$0
    )
}
        )
    }

    public func `kind`(`kind`: UInt64)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_kind(self.pointer, 
        FfiConverterUInt64.lower(`kind`),$0
    )
}
        )
    }

    public func `event`(`eventId`: EventId)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_event(self.pointer, 
        FfiConverterTypeEventId.lower(`eventId`),$0
    )
}
        )
    }

    public func `events`(`ids`: [EventId])  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_events(self.pointer, 
        FfiConverterSequenceTypeEventId.lower(`ids`),$0
    )
}
        )
    }

    public func `pubkey`(`pubkey`: PublicKey)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_pubkey(self.pointer, 
        FfiConverterTypePublicKey.lower(`pubkey`),$0
    )
}
        )
    }

    public func `pubkeys`(`pubkeys`: [PublicKey])  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_pubkeys(self.pointer, 
        FfiConverterSequenceTypePublicKey.lower(`pubkeys`),$0
    )
}
        )
    }

    public func `since`(`timestamp`: Timestamp)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_since(self.pointer, 
        FfiConverterTypeTimestamp.lower(`timestamp`),$0
    )
}
        )
    }

    public func `until`(`timestamp`: Timestamp)  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_until(self.pointer, 
        FfiConverterTypeTimestamp.lower(`timestamp`),$0
    )
}
        )
    }

    public func `authors`(`authors`: [String])  -> Filter {
        return try!  FfiConverterTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_filter_authors(self.pointer, 
        FfiConverterSequenceString.lower(`authors`),$0
    )
}
        )
    }
}

public struct FfiConverterTypeFilter: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Filter

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Filter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Filter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Filter {
        return Filter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Filter) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeFilter_lift(_ pointer: UnsafeMutableRawPointer) throws -> Filter {
    return try FfiConverterTypeFilter.lift(pointer)
}

public func FfiConverterTypeFilter_lower(_ value: Filter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFilter.lower(value)
}


public protocol ImageDimensionsProtocol {
    func `width`()   -> UInt64
    func `height`()   -> UInt64
    
}

public class ImageDimensions: ImageDimensionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`width`: UInt64, `height`: UInt64)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_imagedimensions_new(
        FfiConverterUInt64.lower(`width`),
        FfiConverterUInt64.lower(`height`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_imagedimensions(pointer, $0) }
    }

    

    
    

    public func `width`()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_imagedimensions_width(self.pointer, $0
    )
}
        )
    }

    public func `height`()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_imagedimensions_height(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeImageDimensions: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ImageDimensions

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ImageDimensions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ImageDimensions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ImageDimensions {
        return ImageDimensions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ImageDimensions) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeImageDimensions_lift(_ pointer: UnsafeMutableRawPointer) throws -> ImageDimensions {
    return try FfiConverterTypeImageDimensions.lift(pointer)
}

public func FfiConverterTypeImageDimensions_lower(_ value: ImageDimensions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeImageDimensions.lower(value)
}


public protocol KeysProtocol {
    func `publicKey`()   -> PublicKey
    func `secretKey`()  throws -> SecretKey
    
}

public class Keys: KeysProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`sk`: SecretKey)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_keys_new(
        FfiConverterTypeSecretKey.lower(`sk`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_keys(pointer, $0) }
    }

    

    public static func `fromPublicKey`(`pk`: PublicKey)  -> Keys {
        return Keys(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_keys_from_public_key(
        FfiConverterTypePublicKey.lower(`pk`),$0)
})
    }

    

    public static func `fromSkStr`(`sk`: String) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_keys_from_sk_str(
        FfiConverterString.lower(`sk`),$0)
})
    }

    

    public static func `fromPkStr`(`pk`: String) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_keys_from_pk_str(
        FfiConverterString.lower(`pk`),$0)
})
    }

    

    public static func `generate`()  -> Keys {
        return Keys(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_keys_generate($0)
})
    }

    

    public static func `vanity`(`prefixes`: [String], `bech32`: Bool, `numCores`: UInt8) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_keys_vanity(
        FfiConverterSequenceString.lower(`prefixes`),
        FfiConverterBool.lower(`bech32`),
        FfiConverterUInt8.lower(`numCores`),$0)
})
    }

    

    public static func `fromMnemonic`(`mnemonic`: String, `passphrase`: String? = nil) throws -> Keys {
        return Keys(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_keys_from_mnemonic(
        FfiConverterString.lower(`mnemonic`),
        FfiConverterOptionString.lower(`passphrase`),$0)
})
    }

    

    
    

    public func `publicKey`()  -> PublicKey {
        return try!  FfiConverterTypePublicKey.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_keys_public_key(self.pointer, $0
    )
}
        )
    }

    public func `secretKey`() throws -> SecretKey {
        return try  FfiConverterTypeSecretKey.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_keys_secret_key(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeKeys: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Keys

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Keys {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Keys, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Keys {
        return Keys(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Keys) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeKeys_lift(_ pointer: UnsafeMutableRawPointer) throws -> Keys {
    return try FfiConverterTypeKeys.lift(pointer)
}

public func FfiConverterTypeKeys_lower(_ value: Keys) -> UnsafeMutableRawPointer {
    return FfiConverterTypeKeys.lower(value)
}


public protocol NostrConnectURIProtocol {
    func `publicKey`()   -> String
    func `relayUrl`()   -> String
    func `name`()   -> String
    func `url`()   -> String?
    func `description`()   -> String?
    
}

public class NostrConnectUri: NostrConnectURIProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_nostrconnecturi(pointer, $0) }
    }

    

    public static func `fromString`(`uri`: String) throws -> NostrConnectUri {
        return NostrConnectUri(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_nostrconnecturi_from_string(
        FfiConverterString.lower(`uri`),$0)
})
    }

    

    
    

    public func `publicKey`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_nostrconnecturi_public_key(self.pointer, $0
    )
}
        )
    }

    public func `relayUrl`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_nostrconnecturi_relay_url(self.pointer, $0
    )
}
        )
    }

    public func `name`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_nostrconnecturi_name(self.pointer, $0
    )
}
        )
    }

    public func `url`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_nostrconnecturi_url(self.pointer, $0
    )
}
        )
    }

    public func `description`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_nostrconnecturi_description(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeNostrConnectURI: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NostrConnectUri

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrConnectUri {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NostrConnectUri, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NostrConnectUri {
        return NostrConnectUri(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NostrConnectUri) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeNostrConnectURI_lift(_ pointer: UnsafeMutableRawPointer) throws -> NostrConnectUri {
    return try FfiConverterTypeNostrConnectURI.lift(pointer)
}

public func FfiConverterTypeNostrConnectURI_lower(_ value: NostrConnectUri) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNostrConnectURI.lower(value)
}


public protocol ProfileProtocol {
    func `toBech32`()  throws -> String
    func `toNostrUri`()  throws -> String
    func `publicKey`()   -> PublicKey
    func `relays`()   -> [String]
    
}

public class Profile: ProfileProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(`publicKey`: PublicKey, `relays`: [String])  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_profile_new(
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterSequenceString.lower(`relays`),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_profile(pointer, $0) }
    }

    

    public static func `fromBech32`(`bech32`: String) throws -> Profile {
        return Profile(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_profile_from_bech32(
        FfiConverterString.lower(`bech32`),$0)
})
    }

    

    public static func `fromNostrUri`(`uri`: String) throws -> Profile {
        return Profile(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_profile_from_nostr_uri(
        FfiConverterString.lower(`uri`),$0)
})
    }

    

    
    

    public func `toBech32`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_profile_to_bech32(self.pointer, $0
    )
}
        )
    }

    public func `toNostrUri`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_profile_to_nostr_uri(self.pointer, $0
    )
}
        )
    }

    public func `publicKey`()  -> PublicKey {
        return try!  FfiConverterTypePublicKey.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_profile_public_key(self.pointer, $0
    )
}
        )
    }

    public func `relays`()  -> [String] {
        return try!  FfiConverterSequenceString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_profile_relays(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeProfile: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Profile

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Profile {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Profile, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Profile {
        return Profile(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Profile) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeProfile_lift(_ pointer: UnsafeMutableRawPointer) throws -> Profile {
    return try FfiConverterTypeProfile.lift(pointer)
}

public func FfiConverterTypeProfile_lower(_ value: Profile) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProfile.lower(value)
}


public protocol PublicKeyProtocol {
    func `toHex`()   -> String
    func `toBech32`()  throws -> String
    func `toNostrUri`()  throws -> String
    
}

public class PublicKey: PublicKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_publickey(pointer, $0) }
    }

    

    public static func `fromHex`(`hex`: String) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_publickey_from_hex(
        FfiConverterString.lower(`hex`),$0)
})
    }

    

    public static func `fromBech32`(`pk`: String) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_publickey_from_bech32(
        FfiConverterString.lower(`pk`),$0)
})
    }

    

    public static func `fromNostrUri`(`uri`: String) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_publickey_from_nostr_uri(
        FfiConverterString.lower(`uri`),$0)
})
    }

    

    
    

    public func `toHex`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_publickey_to_hex(self.pointer, $0
    )
}
        )
    }

    public func `toBech32`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_publickey_to_bech32(self.pointer, $0
    )
}
        )
    }

    public func `toNostrUri`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_publickey_to_nostr_uri(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypePublicKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = PublicKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PublicKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: PublicKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
        return PublicKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypePublicKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> PublicKey {
    return try FfiConverterTypePublicKey.lift(pointer)
}

public func FfiConverterTypePublicKey_lower(_ value: PublicKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypePublicKey.lower(value)
}


public protocol RelayInformationDocumentProtocol {
    func `name`()   -> String?
    func `description`()   -> String?
    func `pubkey`()   -> String?
    func `contact`()   -> String?
    func `supportedNips`()   -> [UInt16]?
    func `software`()   -> String?
    func `version`()   -> String?
    
}

public class RelayInformationDocument: RelayInformationDocumentProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_relayinformationdocument(pointer, $0) }
    }

    

    public static func `get`(`url`: String, `proxy`: String?) throws -> RelayInformationDocument {
        return RelayInformationDocument(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_relayinformationdocument_get(
        FfiConverterString.lower(`url`),
        FfiConverterOptionString.lower(`proxy`),$0)
})
    }

    

    
    

    public func `name`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_name(self.pointer, $0
    )
}
        )
    }

    public func `description`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_description(self.pointer, $0
    )
}
        )
    }

    public func `pubkey`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_pubkey(self.pointer, $0
    )
}
        )
    }

    public func `contact`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_contact(self.pointer, $0
    )
}
        )
    }

    public func `supportedNips`()  -> [UInt16]? {
        return try!  FfiConverterOptionSequenceUInt16.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_supported_nips(self.pointer, $0
    )
}
        )
    }

    public func `software`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_software(self.pointer, $0
    )
}
        )
    }

    public func `version`()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_relayinformationdocument_version(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeRelayInformationDocument: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RelayInformationDocument

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RelayInformationDocument {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RelayInformationDocument, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RelayInformationDocument {
        return RelayInformationDocument(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RelayInformationDocument) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeRelayInformationDocument_lift(_ pointer: UnsafeMutableRawPointer) throws -> RelayInformationDocument {
    return try FfiConverterTypeRelayInformationDocument.lift(pointer)
}

public func FfiConverterTypeRelayInformationDocument_lower(_ value: RelayInformationDocument) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRelayInformationDocument.lower(value)
}


public protocol SecretKeyProtocol {
    func `toHex`()   -> String
    func `toBech32`()  throws -> String
    
}

public class SecretKey: SecretKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_secretkey(pointer, $0) }
    }

    

    public static func `fromHex`(`hex`: String) throws -> SecretKey {
        return SecretKey(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_secretkey_from_hex(
        FfiConverterString.lower(`hex`),$0)
})
    }

    

    public static func `fromBech32`(`pk`: String) throws -> SecretKey {
        return SecretKey(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_secretkey_from_bech32(
        FfiConverterString.lower(`pk`),$0)
})
    }

    

    
    

    public func `toHex`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_secretkey_to_hex(self.pointer, $0
    )
}
        )
    }

    public func `toBech32`() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_secretkey_to_bech32(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeSecretKey: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SecretKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SecretKey {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SecretKey, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SecretKey {
        return SecretKey(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SecretKey) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeSecretKey_lift(_ pointer: UnsafeMutableRawPointer) throws -> SecretKey {
    return try FfiConverterTypeSecretKey.lift(pointer)
}

public func FfiConverterTypeSecretKey_lower(_ value: SecretKey) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSecretKey.lower(value)
}


public protocol TimestampProtocol {
    func `asSecs`()   -> UInt64
    func `toHumanDatetime`()   -> String
    
}

public class Timestamp: TimestampProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_timestamp(pointer, $0) }
    }

    

    public static func `now`()  -> Timestamp {
        return Timestamp(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_timestamp_now($0)
})
    }

    

    public static func `fromSecs`(`secs`: UInt64)  -> Timestamp {
        return Timestamp(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_fn_constructor_timestamp_from_secs(
        FfiConverterUInt64.lower(`secs`),$0)
})
    }

    

    
    

    public func `asSecs`()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_timestamp_as_secs(self.pointer, $0
    )
}
        )
    }

    public func `toHumanDatetime`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_timestamp_to_human_datetime(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeTimestamp: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Timestamp

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Timestamp {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Timestamp, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Timestamp {
        return Timestamp(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Timestamp) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeTimestamp_lift(_ pointer: UnsafeMutableRawPointer) throws -> Timestamp {
    return try FfiConverterTypeTimestamp.lift(pointer)
}

public func FfiConverterTypeTimestamp_lower(_ value: Timestamp) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTimestamp.lower(value)
}


public protocol UnsignedEventProtocol {
    func `id`()   -> EventId
    func `pubkey`()   -> PublicKey
    func `createdAt`()   -> Timestamp
    func `kind`()   -> UInt64
    func `content`()   -> String
    func `sign`(`keys`: Keys)  throws -> Event
    func `addSignature`(`sig`: String)  throws -> Event
    func `asJson`()   -> String
    
}

public class UnsignedEvent: UnsignedEventProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_nostr_fn_free_unsignedevent(pointer, $0) }
    }

    

    public static func `fromJson`(`json`: String) throws -> UnsignedEvent {
        return UnsignedEvent(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_constructor_unsignedevent_from_json(
        FfiConverterString.lower(`json`),$0)
})
    }

    

    
    

    public func `id`()  -> EventId {
        return try!  FfiConverterTypeEventId.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_unsignedevent_id(self.pointer, $0
    )
}
        )
    }

    public func `pubkey`()  -> PublicKey {
        return try!  FfiConverterTypePublicKey.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_unsignedevent_pubkey(self.pointer, $0
    )
}
        )
    }

    public func `createdAt`()  -> Timestamp {
        return try!  FfiConverterTypeTimestamp.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_unsignedevent_created_at(self.pointer, $0
    )
}
        )
    }

    public func `kind`()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_unsignedevent_kind(self.pointer, $0
    )
}
        )
    }

    public func `content`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_unsignedevent_content(self.pointer, $0
    )
}
        )
    }

    public func `sign`(`keys`: Keys) throws -> Event {
        return try  FfiConverterTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_unsignedevent_sign(self.pointer, 
        FfiConverterTypeKeys.lower(`keys`),$0
    )
}
        )
    }

    public func `addSignature`(`sig`: String) throws -> Event {
        return try  FfiConverterTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_method_unsignedevent_add_signature(self.pointer, 
        FfiConverterString.lower(`sig`),$0
    )
}
        )
    }

    public func `asJson`()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_fn_method_unsignedevent_as_json(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeUnsignedEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UnsignedEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UnsignedEvent {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UnsignedEvent, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedEvent {
        return UnsignedEvent(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UnsignedEvent) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeUnsignedEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> UnsignedEvent {
    return try FfiConverterTypeUnsignedEvent.lift(pointer)
}

public func FfiConverterTypeUnsignedEvent_lower(_ value: UnsignedEvent) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUnsignedEvent.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ClientMessage {
    
    case `ev`(`event`: String)
    case `req`(`subscriptionId`: String, `filters`: [String])
    case `count`(`subscriptionId`: String, `filters`: [String])
    case `close`(`subscriptionId`: String)
    case `auth`(`event`: String)
}

public struct FfiConverterTypeClientMessage: FfiConverterRustBuffer {
    typealias SwiftType = ClientMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`ev`(
            `event`: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .`req`(
            `subscriptionId`: try FfiConverterString.read(from: &buf), 
            `filters`: try FfiConverterSequenceString.read(from: &buf)
        )
        
        case 3: return .`count`(
            `subscriptionId`: try FfiConverterString.read(from: &buf), 
            `filters`: try FfiConverterSequenceString.read(from: &buf)
        )
        
        case 4: return .`close`(
            `subscriptionId`: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .`auth`(
            `event`: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ClientMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`ev`(`event`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`event`, into: &buf)
            
        
        case let .`req`(`subscriptionId`,`filters`):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(`subscriptionId`, into: &buf)
            FfiConverterSequenceString.write(`filters`, into: &buf)
            
        
        case let .`count`(`subscriptionId`,`filters`):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(`subscriptionId`, into: &buf)
            FfiConverterSequenceString.write(`filters`, into: &buf)
            
        
        case let .`close`(`subscriptionId`):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(`subscriptionId`, into: &buf)
            
        
        case let .`auth`(`event`):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(`event`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeClientMessage_lift(_ buf: RustBuffer) throws -> ClientMessage {
    return try FfiConverterTypeClientMessage.lift(buf)
}

public func FfiConverterTypeClientMessage_lower(_ value: ClientMessage) -> RustBuffer {
    return FfiConverterTypeClientMessage.lower(value)
}


extension ClientMessage: Equatable, Hashable {}



public enum NostrError {

    
    
    case Generic(`err`: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeNostrError.lift(error)
    }
}


public struct FfiConverterTypeNostrError: FfiConverterRustBuffer {
    typealias SwiftType = NostrError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            `err`: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NostrError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(`err`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`err`, into: &buf)
            
        }
    }
}


extension NostrError: Equatable, Hashable {}

extension NostrError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RelayMessage {
    
    case `ev`(`subscriptionId`: String, `event`: String)
    case `notice`(`message`: String)
    case `endOfStoredEvents`(`subscriptionId`: String)
    case `ok`(`eventId`: String, `status`: Bool, `message`: String)
    case `auth`(`challenge`: String)
    case `count`(`subscriptionId`: String, `count`: UInt64)
}

public struct FfiConverterTypeRelayMessage: FfiConverterRustBuffer {
    typealias SwiftType = RelayMessage

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RelayMessage {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`ev`(
            `subscriptionId`: try FfiConverterString.read(from: &buf), 
            `event`: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .`notice`(
            `message`: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .`endOfStoredEvents`(
            `subscriptionId`: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .`ok`(
            `eventId`: try FfiConverterString.read(from: &buf), 
            `status`: try FfiConverterBool.read(from: &buf), 
            `message`: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .`auth`(
            `challenge`: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .`count`(
            `subscriptionId`: try FfiConverterString.read(from: &buf), 
            `count`: try FfiConverterUInt64.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RelayMessage, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`ev`(`subscriptionId`,`event`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`subscriptionId`, into: &buf)
            FfiConverterString.write(`event`, into: &buf)
            
        
        case let .`notice`(`message`):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(`message`, into: &buf)
            
        
        case let .`endOfStoredEvents`(`subscriptionId`):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(`subscriptionId`, into: &buf)
            
        
        case let .`ok`(`eventId`,`status`,`message`):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(`eventId`, into: &buf)
            FfiConverterBool.write(`status`, into: &buf)
            FfiConverterString.write(`message`, into: &buf)
            
        
        case let .`auth`(`challenge`):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(`challenge`, into: &buf)
            
        
        case let .`count`(`subscriptionId`,`count`):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(`subscriptionId`, into: &buf)
            FfiConverterUInt64.write(`count`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeRelayMessage_lift(_ buf: RustBuffer) throws -> RelayMessage {
    return try FfiConverterTypeRelayMessage.lift(buf)
}

public func FfiConverterTypeRelayMessage_lower(_ value: RelayMessage) -> RustBuffer {
    return FfiConverterTypeRelayMessage.lower(value)
}


extension RelayMessage: Equatable, Hashable {}



fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]

    public static func write(_ value: [UInt16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt16] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt16.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeContact: FfiConverterRustBuffer {
    typealias SwiftType = [Contact]

    public static func write(_ value: [Contact], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContact.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Contact] {
        let len: Int32 = try readInt(&buf)
        var seq = [Contact]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContact.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeEventId: FfiConverterRustBuffer {
    typealias SwiftType = [EventId]

    public static func write(_ value: [EventId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEventId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [EventId] {
        let len: Int32 = try readInt(&buf)
        var seq = [EventId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeEventId.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypePublicKey: FfiConverterRustBuffer {
    typealias SwiftType = [PublicKey]

    public static func write(_ value: [PublicKey], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePublicKey.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PublicKey] {
        let len: Int32 = try readInt(&buf)
        var seq = [PublicKey]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePublicKey.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [[String]]

    public static func write(_ value: [[String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterSequenceString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [[String]] {
        let len: Int32 = try readInt(&buf)
        var seq = [[String]]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterSequenceString.read(from: &buf))
        }
        return seq
    }
}

public func `nip04Encrypt`(`secretKey`: SecretKey, `publicKey`: PublicKey, `content`: String) throws -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_func_nip04_encrypt(
        FfiConverterTypeSecretKey.lower(`secretKey`),
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterString.lower(`content`),$0)
}
    )
}

public func `nip04Decrypt`(`secretKey`: SecretKey, `publicKey`: PublicKey, `encryptedContent`: String) throws -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_func_nip04_decrypt(
        FfiConverterTypeSecretKey.lower(`secretKey`),
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterString.lower(`encryptedContent`),$0)
}
    )
}

public func `verifyNip05`(`publicKey`: PublicKey, `nip05`: String, `proxy`: String?) throws {
    try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_func_verify_nip05(
        FfiConverterTypePublicKey.lower(`publicKey`),
        FfiConverterString.lower(`nip05`),
        FfiConverterOptionString.lower(`proxy`),$0)
}
}



public func `getNip05Profile`(`nip05`: String, `proxy`: String?) throws -> Profile {
    return try  FfiConverterTypeProfile.lift(
        try rustCallWithError(FfiConverterTypeNostrError.lift) {
    uniffi_nostr_fn_func_get_nip05_profile(
        FfiConverterString.lower(`nip05`),
        FfiConverterOptionString.lower(`proxy`),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_nostr_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_nostr_checksum_func_nip04_encrypt() != 38992) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_func_nip04_decrypt() != 47244) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_func_verify_nip05() != 3060) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_func_get_nip05_profile() != 22898) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_name() != 46470) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_description() != 13756) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_pubkey() != 33306) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_contact() != 53669) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_supported_nips() != 22033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_software() != 35469) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_relayinformationdocument_version() != 29294) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_nostrconnecturi_public_key() != 50702) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_nostrconnecturi_relay_url() != 20195) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_nostrconnecturi_name() != 21835) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_nostrconnecturi_url() != 11013) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_nostrconnecturi_description() != 60710) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_profile_to_bech32() != 54721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_profile_to_nostr_uri() != 39333) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_profile_public_key() != 1668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_profile_relays() != 10511) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_imagedimensions_width() != 14157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_imagedimensions_height() != 25350) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_timestamp_as_secs() != 25229) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_timestamp_to_human_datetime() != 63573) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_secretkey_to_hex() != 49435) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_secretkey_to_bech32() != 18228) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_publickey_to_hex() != 21121) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_publickey_to_bech32() != 22428) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_publickey_to_nostr_uri() != 3782) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_keys_public_key() != 56782) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_keys_secret_key() != 1967) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_id() != 4651) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_ids() != 43589) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_kind() != 50575) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_event() != 19371) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_events() != 46711) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_pubkey() != 11829) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_pubkeys() != 10151) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_since() != 50963) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_until() != 51231) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filter_authors() != 13388) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventid_as_bytes() != 35605) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventid_to_hex() != 60848) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventid_to_bech32() != 10157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventid_to_nostr_uri() != 53660) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_id() != 4332) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_pubkey() != 49031) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_created_at() != 33399) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_kind() != 9588) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_content() != 4897) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_sign() != 47073) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_add_signature() != 3632) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_unsignedevent_as_json() != 5676) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_id() != 20498) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_pubkey() != 37540) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_created_at() != 21925) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_kind() != 46205) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_content() != 13758) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_signature() != 25215) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_verify() != 64500) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_event_as_json() != 1515) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventbuilder_to_event() != 45102) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventbuilder_to_pow_event() != 27784) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventbuilder_to_unsigned_event() != 32792) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_eventbuilder_to_unsigned_pow_event() != 100) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_contact_alias() != 7298) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_contact_public_key() != 36418) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_contact_relay_url() != 21061) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_accountmetadata_name() != 60018) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_accountmetadata_display_name() != 26155) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_accountmetadata_about() != 63602) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_accountmetadata_picture() != 45075) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_accountmetadata_nip05() != 33286) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filemetadata_aes_256_gcm() != 40093) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filemetadata_size() != 34070) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filemetadata_dimensions() != 64867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filemetadata_magnet() != 18491) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_method_filemetadata_blurhash() != 27024) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_relayinformationdocument_get() != 63040) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_nostrconnecturi_from_string() != 33955) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_profile_new() != 34019) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_profile_from_bech32() != 30112) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_profile_from_nostr_uri() != 19167) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_imagedimensions_new() != 32279) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_timestamp_now() != 42092) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_timestamp_from_secs() != 44617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_secretkey_from_hex() != 33478) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_secretkey_from_bech32() != 28655) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_publickey_from_hex() != 31721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_publickey_from_bech32() != 29843) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_publickey_from_nostr_uri() != 14702) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_new() != 27709) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_from_public_key() != 36887) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_from_sk_str() != 64210) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_from_pk_str() != 18813) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_generate() != 18596) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_vanity() != 30711) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_keys_from_mnemonic() != 16157) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_filter_new() != 35046) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventid_new() != 61100) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventid_from_slice() != 50284) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventid_from_hex() != 19169) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventid_from_bech32() != 23310) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventid_from_nostr_uri() != 48017) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_unsignedevent_from_json() != 7341) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_event_from_json() != 10283) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_new() != 54730) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_set_metadata() != 843) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_add_recommended_relay() != 7806) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_new_text_note() != 14254) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_long_form_text_note() != 11031) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_repost() != 17503) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_set_contact_list() != 9032) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_new_encrypted_direct_msg() != 59522) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_delete() != 59434) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_new_reaction() != 13178) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_new_channel() != 26062) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_set_channel_metadata() != 64850) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_new_channel_msg() != 46173) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_hide_channel_msg() != 39139) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_mute_channel_user() != 25465) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_auth() != 9847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_eventbuilder_file_metadata() != 10756) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_contact_new() != 29056) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_accountmetadata_new() != 2416) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_checksum_constructor_filemetadata_new() != 58921) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}